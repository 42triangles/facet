{# Template for generating Facet implementations for tuples #}

{# Note: this comment applies not to this template file, but to the generated code #}
//! GENERATED: DO NOT EDIT — this file is generated from `tuples_impls.rs.j2`
//! file in the `facet-codegen` crate.

use std::{alloc::Layout, fmt};

use crate::{Field, FieldFlags, Def, StructDef, Shape, Facet, TypeNameOpts, ValueVTable, Characteristic, OpaqueConst, MarkerTraits};

#[inline(always)]
pub fn write_type_name_list(
    f: &mut fmt::Formatter<'_>,
    opts: TypeNameOpts,
    open: &'static str,
    delimiter: &'static str,
    close: &'static str,
    shapes: &'static [&'static Shape],
) -> fmt::Result {
    f.pad(open)?;
    if let Some(opts) = opts.for_children() {
        for (index, shape) in shapes.iter().enumerate() {
            if index > 0 {
                f.pad(delimiter)?;
            }
            shape.write_type_name(f, opts)?;
        }
    } else {
        write!(f, "⋯")?;
    }
    f.pad(close)?;
    Ok(())
}

macro_rules! field {
    ($idx:tt, $ty:ty,) => {
        Field {
            name: stringify!($idx),
            shape: $crate::shape_of(&|t: $ty| t.$idx),
            offset: std::mem::offset_of!($ty, $idx),
            flags: FieldFlags::EMPTY,
        }
    };
}

{% for n in range(1, max_tuple_size + 1) %}
    {%- set where_predicates %}{% for i in range(n) %}T{{ i }}: Facet{% if not loop.last %},{% endif %}{% endfor %}{% endset %}
    {%- set type_list %}
        {%- for i in range(n) -%}
        T{{ i }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- endset %}
    {%- set shape_list %}
        {%- for i in range(n) -%}
        T{{ i }}::SHAPE{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- endset -%}
    {%- set shape_slice %}&[{{ shape_list }}]{%- endset -%}
    {%- set type_name %}
        ({%- for i in range(n) %}T{{ i }},{% endfor -%})
    {%- endset -%}
unsafe impl<{{ type_list }}> Facet for {{ type_name }}
where
    {{ where_predicates }}
{
    const DUMMY: Self = (
        {% for i in range(n) %}T{{ i }}::DUMMY,{% endfor %}
    );
    const SHAPE: &'static Shape = &const {
        fn type_name<{{ type_list }}>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            {{ where_predicates }}
        {
            write_type_name_list(f, opts, "(", ", ", ")", {{ shape_slice }})
        }

        Shape {
            layout: Layout::new::<{{ type_name }}>(),
            vtable: &ValueVTable {
                type_name: type_name::<{{ type_list }}>,
                display: None,
                debug: const {
                    if Characteristic::Eq.all({{ shape_slice }}) {
                        Some(|value, f| {
                            let value = unsafe { value.as_ref::<{{ type_name }}>() };
                            write!(f, "(")?;
                            {% for i in range(n) %}{% if i > 0 %}write!(f, ", ")?;
                            {% endif %}unsafe {
                                (T{{ i }}::SHAPE.vtable.debug.unwrap_unchecked())(
                                    OpaqueConst::from_ref(&value.{{ i }}),
                                    f,
                                )
                            }?;{% endfor %}
                            write!(f, ")")
                        })
                    } else {
                        None
                    }
                },
                default_in_place: None,
                clone_into: None,
                marker_traits: MarkerTraits::empty(),
                eq: if Characteristic::Eq.all({{ shape_slice }}) {
                    Some(|a, b| {
                        let a = unsafe { a.as_ref::<{{ type_name }}>() };
                        let b = unsafe { b.as_ref::<{{ type_name }}>() };

                        {% for i in range(n) %}{% if i < n-1 %}// Compare element {{ i }}
                        if !unsafe {
                            (T{{ i }}::SHAPE.vtable.eq.unwrap_unchecked())(
                                OpaqueConst::from_ref(&a.{{ i }}),
                                OpaqueConst::from_ref(&b.{{ i }}),
                            )
                        } {
                            return false;
                        }

                        {% elif i == n-1 %}// Compare last element
                        unsafe {
                            (T{{ i }}::SHAPE.vtable.eq.unwrap_unchecked())(
                                OpaqueConst::from_ref(&a.{{ i }}),
                                OpaqueConst::from_ref(&b.{{ i }}),
                            )
                        }{% endif %}{% endfor %}
                    })
                } else {
                    None
                },
                partial_ord: None,
                ord: None,
                hash: None,
                drop_in_place: None,
                parse: None,
                try_from: None,
            },
            def: Def::Tuple(StructDef {
                fields: &const { [
                    {% for i in range(n) %}field!({{ i }}, {{ type_name }},){% if not loop.last %},
                    {% endif %}{% endfor %}
                ] },
            }),
        }
    };
}
{% endfor %}
